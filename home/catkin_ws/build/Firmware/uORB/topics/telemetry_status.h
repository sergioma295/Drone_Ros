/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file telemetry_status.msg */


#pragma once


#include <uORB/uORB.h>


#ifndef __cplusplus
#define TELEMETRY_STATUS_LINK_TYPE_GENERIC 0
#define TELEMETRY_STATUS_LINK_TYPE_3DR_RADIO 1
#define TELEMETRY_STATUS_LINK_TYPE_UBIQUITY_BULLET 2
#define TELEMETRY_STATUS_LINK_TYPE_WIRE 3
#define TELEMETRY_STATUS_LINK_TYPE_USB 4
#define TELEMETRY_STATUS_LINK_TYPE_IRIDIUM 5
#define TELEMETRY_STATUS_COMPONENT_ID_ALL 0
#define TELEMETRY_STATUS_COMPONENT_ID_AUTOPILOT1 1
#define TELEMETRY_STATUS_COMPONENT_ID_CAMERA 100
#define TELEMETRY_STATUS_COMPONENT_ID_OBSTACLE_AVOIDANCE 196
#define TELEMETRY_STATUS_MAV_TYPE_GENERIC 0
#define TELEMETRY_STATUS_MAV_TYPE_GCS 6
#define TELEMETRY_STATUS_MAV_TYPE_ONBOARD_CONTROLLER 18
#define TELEMETRY_STATUS_MAV_STATE_UNINIT 0
#define TELEMETRY_STATUS_MAV_STATE_BOOT 1
#define TELEMETRY_STATUS_MAV_STATE_CALIBRATING 2
#define TELEMETRY_STATUS_MAV_STATE_STANDBY 3
#define TELEMETRY_STATUS_MAV_STATE_ACTIVE 4
#define TELEMETRY_STATUS_MAV_STATE_CRITICAL 5
#define TELEMETRY_STATUS_MAV_STATE_EMERGENCY 6
#define TELEMETRY_STATUS_MAV_STATE_POWEROFF 7
#define TELEMETRY_STATUS_MAV_STATE_FLIGHT_TERMINATION 8

#endif


#ifdef __cplusplus
struct __EXPORT telemetry_status_s {
#else
struct telemetry_status_s {
#endif
	uint64_t timestamp;
	uint64_t heartbeat_time;
	float data_rate;
	float rate_multiplier;
	float rate_rx;
	float rate_tx;
	float rate_txerr;
	uint8_t remote_system_id;
	uint8_t remote_component_id;
	uint8_t remote_type;
	uint8_t remote_system_status;
	uint8_t type;
	uint8_t mode;
	bool flow_control;
	bool forwarding;
	bool mavlink_v2;
	bool ftp;
	uint8_t streams;
	uint8_t _padding0[1]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t LINK_TYPE_GENERIC = 0;
	static constexpr uint8_t LINK_TYPE_3DR_RADIO = 1;
	static constexpr uint8_t LINK_TYPE_UBIQUITY_BULLET = 2;
	static constexpr uint8_t LINK_TYPE_WIRE = 3;
	static constexpr uint8_t LINK_TYPE_USB = 4;
	static constexpr uint8_t LINK_TYPE_IRIDIUM = 5;
	static constexpr uint8_t COMPONENT_ID_ALL = 0;
	static constexpr uint8_t COMPONENT_ID_AUTOPILOT1 = 1;
	static constexpr uint8_t COMPONENT_ID_CAMERA = 100;
	static constexpr uint8_t COMPONENT_ID_OBSTACLE_AVOIDANCE = 196;
	static constexpr uint8_t MAV_TYPE_GENERIC = 0;
	static constexpr uint8_t MAV_TYPE_GCS = 6;
	static constexpr uint8_t MAV_TYPE_ONBOARD_CONTROLLER = 18;
	static constexpr uint8_t MAV_STATE_UNINIT = 0;
	static constexpr uint8_t MAV_STATE_BOOT = 1;
	static constexpr uint8_t MAV_STATE_CALIBRATING = 2;
	static constexpr uint8_t MAV_STATE_STANDBY = 3;
	static constexpr uint8_t MAV_STATE_ACTIVE = 4;
	static constexpr uint8_t MAV_STATE_CRITICAL = 5;
	static constexpr uint8_t MAV_STATE_EMERGENCY = 6;
	static constexpr uint8_t MAV_STATE_POWEROFF = 7;
	static constexpr uint8_t MAV_STATE_FLIGHT_TERMINATION = 8;

#endif
};

/* register this as object request broker structure */
ORB_DECLARE(telemetry_status);


#ifdef __cplusplus
void print_message(const telemetry_status_s& message);
#endif
