/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file tecs_status.msg */


#include <inttypes.h>
#include <px4_log.h>
#include <px4_defines.h>
#include <uORB/topics/tecs_status.h>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>

constexpr char __orb_tecs_status_fields[] = "uint64_t timestamp;float altitude_sp;float altitude_filtered;float height_rate_setpoint;float height_rate;float airspeed_sp;float airspeed_filtered;float airspeed_derivative_sp;float airspeed_derivative;float total_energy_error;float energy_distribution_error;float total_energy_rate_error;float energy_distribution_rate_error;float throttle_integ;float pitch_integ;uint8_t mode;uint8_t[7] _padding0;";

ORB_DEFINE(tecs_status, struct tecs_status_s, 65, __orb_tecs_status_fields);


void print_message(const tecs_status_s& message)
{
	PX4_INFO_RAW(" tecs_status_s\n");
	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, hrt_elapsed_time(&message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	PX4_INFO_RAW("\taltitude_sp: %.4f\n", (double)message.altitude_sp);
	PX4_INFO_RAW("\taltitude_filtered: %.4f\n", (double)message.altitude_filtered);
	PX4_INFO_RAW("\theight_rate_setpoint: %.4f\n", (double)message.height_rate_setpoint);
	PX4_INFO_RAW("\theight_rate: %.4f\n", (double)message.height_rate);
	PX4_INFO_RAW("\tairspeed_sp: %.4f\n", (double)message.airspeed_sp);
	PX4_INFO_RAW("\tairspeed_filtered: %.4f\n", (double)message.airspeed_filtered);
	PX4_INFO_RAW("\tairspeed_derivative_sp: %.4f\n", (double)message.airspeed_derivative_sp);
	PX4_INFO_RAW("\tairspeed_derivative: %.4f\n", (double)message.airspeed_derivative);
	PX4_INFO_RAW("\ttotal_energy_error: %.4f\n", (double)message.total_energy_error);
	PX4_INFO_RAW("\tenergy_distribution_error: %.4f\n", (double)message.energy_distribution_error);
	PX4_INFO_RAW("\ttotal_energy_rate_error: %.4f\n", (double)message.total_energy_rate_error);
	PX4_INFO_RAW("\tenergy_distribution_rate_error: %.4f\n", (double)message.energy_distribution_rate_error);
	PX4_INFO_RAW("\tthrottle_integ: %.4f\n", (double)message.throttle_integ);
	PX4_INFO_RAW("\tpitch_integ: %.4f\n", (double)message.pitch_integ);
	PX4_INFO_RAW("\tmode: %u\n", message.mode);
	
}
